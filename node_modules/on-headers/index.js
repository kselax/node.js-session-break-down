/*!
 * on-headers
 * Copyright(c) 2014 Douglas Christopher Wilson
 * MIT Licensed
 */

'use strict'

/**
 * Reference to Array slice.
 */
// unknown variable
// slice The slice() method returns a shallow copy of a portion of an array into a new array object selected from begin to end (end not included). The original array will not be modified.
// var slice has function
var slice = Array.prototype.slice
// console.log(slice); // [Function: slice]
// var str = 'hello world'
// console.log(str.slice(2)); // llo world
// console.log(slice.call(str, 2)); // [ 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd' ]

/**
 * Execute a listener when a response is about to write headers.
 *
 * @param {Object} res
 * @return {Function} listener
 * @api public
 */

module.exports = function onHeaders(res, listener) {
  // if not exists res
  if (!res) {
    throw new TypeError('argument res is required')
  }

  // if listener != function
  // typeof returns string
  if (typeof listener !== 'function') {
    // TypeError - is object for if error type
    throw new TypeError('argument listener must be a function')
  }

  // this module adds property writeHead to res
  // console.log('one '+res.writeHead);
  // res.writeHead equals our own function with calback function
  // createWriteHead is a closure that save inside res.writeHead and custom listener - function
  res.writeHead = createWriteHead(res.writeHead, listener)
}

// this is closure
function createWriteHead(prevWriteHead, listener) {
  var fired = false;

  // return function with core name and argument list

  return function writeHead(statusCode) {
    // set headers from arguments
    // setWriteHeadHeaders is a helper function defined in bottom

    // pass to function setWriteHeadHeaders object this, and array of arguments
    // inside setWriteHeadHeaders this surounded variable will be available
    var args = setWriteHeadHeaders.apply(this, arguments);
    // console.log('args = ' + args);

    // fire listener
    // if fired === false
    if (!fired) {
      fired = true
      // calls your function listener with this as argument, this current surrounding will be
      // available from here
      listener.call(this)

      // pass-along an updated status code
      // if args has number and this.statusCode !== args[0]
      if (typeof args[0] === 'number' && this.statusCode !== args[0]) {
        args[0] = this.statusCode
        args.length = 1
      }
    }
    // prevWriteHead it's res.writeHead, pass there this and args
    // console.log('args = ' + args); // 304
    prevWriteHead.apply(this, args);
  } // function writeHead(statusCode) {
} // function createWriteHead(prevWriteHead, listener) { ( end closure )

function setWriteHeadHeaders(statusCode) {
  // console.log();
  // console.log('statusCode = ' + statusCode);
  var length = arguments.length
  var headerIndex = length > 1 && typeof arguments[1] === 'string'
    ? 2
    : 1
  // console.log(headerIndex); // 1
  var headers = length >= headerIndex + 1
    ? arguments[headerIndex]
    : undefined
  // console.log(headers); // undefined
  this.statusCode = statusCode
  // console.log(this.statusCode); // 304
  // the following block is from node.js core
  // if headers is array, return true Array.isArray()
  // this code doesn't work if headers undefined
  if (Array.isArray(headers)) {
    // console.log('here we are 1');
    // handle array case
    for (var i = 0, len = headers.length; i < len; ++i) {
      this.setHeader(headers[i][0], headers[i][1])
    }
  } else if (headers) {
    // console.log('here we are 2');
    // handle object case
    var keys = Object.keys(headers)
    for (var i = 0; i < keys.length; i++) {
      var k = keys[i]
      if (k) this.setHeader(k, headers[k])
    }
  }

  // copy leading arguments
  // create an empty array to args
  var args = new Array(Math.min(length, headerIndex))
  // console.log(args);
  // put all arguments to args
  for (var i = 0; i < args.length; i++) {
    args[i] = arguments[i]
  }
  // console.log('args = ', args);
  return args
} // function setWriteHeadHeaders(statusCode) {
